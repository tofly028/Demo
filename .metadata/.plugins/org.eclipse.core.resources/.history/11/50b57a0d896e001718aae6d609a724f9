<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.data.inter.IUserOperation">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!-- 
        根据id查询得到一个user对象
     -->
     <select id="SelectUserById" parameterType="int" resultType="com.data.User">
       select * from users where id=#{id}
   </select>
   
    <!-- 为了返回list 类型而定义的returnMap -->
    <resultMap type="com.data.User" id="resultListUser">
        <result column="name" property="name" />
        <result column="age" property="age" />
    </resultMap>
    
    <!-- 返回list 的select 语句，注意 resultMap 的值是指向前面定义好的 -->
    <select id="selectUsers" parameterType="string" resultMap="resultListUser">
        select * from users where name like #{name}
    </select>
    
    <!--执行增加操作的SQL语句。id和parameterType  
       分别与IUserOperation接口中的addUser方法的名字和  
       参数类型一致。以#{name}的形式引用Student参数  
       的name属性，MyBatis将使用反射读取Student参数  
       的此属性。#{name}中name大小写敏感。引用其他  
       的gender等属性与此一致。seGeneratedKeys设置  
       为"true"表明要MyBatis获取由数据库自动生成的主  
       键；keyProperty="id"指定把获取到的主键值注入  
       到Student的id属性--> 
    <insert id="addUser" parameterType="com.data.User" 
        useGeneratedKeys="true" keyProperty="id"> 
        insert into users(name,age) values(#{name},#{age})  
    </insert>
    
     <update id="updateUser" parameterType="com.data.User" 
        useGeneratedKeys="true" keyProperty="id"> 
        update users set name=#{username},age=#{userage} where id=#{userid}
    </update>
</mapper>

